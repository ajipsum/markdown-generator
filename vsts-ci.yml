trigger:
- master
- features/*
- release/*

variables:
  configuration: Release

jobs:
- job: Build_and_Test
  pool: Hosted VS2017

  steps:
  - task: DotNetCoreInstaller@0
    displayName: Use .NET Core SDK 2.1
    inputs:
      version: 2.1.302

  - task: DotNetCoreCLI@2
    displayName: Restore NuGet dependencies
    env: { DOTNET_SKIP_FIRST_TIME_EXPERIENCE : true }
    inputs:
      command: restore
      projects: 'src/**/*.csproj'
  
  - task: DotNetCoreCLI@2
    displayName: Build
    env: { DOTNET_SKIP_FIRST_TIME_EXPERIENCE : true }
    inputs:
      command: build
      projects: 'src/**/*.csproj'
      arguments: '--configuration $(configuration) --no-restore'
  
  - task: DotNetCoreCLI@2
    displayName: Test
    env: { DOTNET_SKIP_FIRST_TIME_EXPERIENCE : true }
    inputs:
      command: test
      projects: 'src/**/*Test*.csproj'
      arguments: '--configuration $(configuration) --no-build'
  
  - task: DotNetCoreCLI@2
    displayName: Pack NuGet package
    env: { DOTNET_SKIP_FIRST_TIME_EXPERIENCE : true }
    inputs:
      command: pack
      projects: 'src/**/*.csproj'
      arguments: '--configuration $(configuration) --output $(Build.ArtifactStagingDirectory) --no-build'
  
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Artifacts'
    inputs:
      artifactName: drop

- job: Publish_to_MyGet
  dependsOn: Build_and_Test
  condition: and(succeeded('Build_and_Test'), or(eq(variables['build.sourceBranch'], 'refs/heads/master'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/') ))
  steps:
  - task: DownloadBuildArtifacts@0
    displayName: 'Download Build Artifacts'
    inputs: 
      buildType: current
      downloadType: single
      artifactName: drop
      downloadPath: $(Build.ArtifactStagingDirectory)
  - task: NuGetCommand@2
    displayName: "Upload package"
    inputs:
      command: push
      nugetFeedType: external
      publishFeedCredentials: 'MyGet - ap0llo-markdown-generator'    

- job: Publish_to_NuGet_org
  dependsOn: Build_and_Test
  condition: and(succeeded('Build_and_Test'), startsWith(variables['Build.SourceBranch'], 'refs/heads/release/'))
  steps:
  - task: DownloadBuildArtifacts@0
    displayName: 'Download Build Artifacts'
    inputs: 
      buildType: current
      downloadType: single
      artifactName: drop
      downloadPath: $(Build.ArtifactStagingDirectory)
  - task: NuGetCommand@2
    displayName: "Upload package"
    inputs:
      command: push
      nugetFeedType: external
      publishFeedCredentials: 'NuGet.org - markdown-generator'    

- job: Create_GitHub_Release
  dependsOn: 
  - Build_and_Test
  - Publish_to_NuGet_org
  condition: and(succeeded('Build_and_Test'), succeeded('Publish_to_NuGet_org'))
  steps:

  - task: DotNetCoreCLI@2
    displayName: Install NBGV tool    
    env: { DOTNET_SKIP_FIRST_TIME_EXPERIENCE : true }
    inputs:
      command: custom
      custom: tool
      arguments: install --tool-path . nbgv
  - script: nbgv cloud
    displayName: Set Version

  - task: DownloadBuildArtifacts@0
    displayName: 'Download Build Artifacts'
    inputs: 
      buildType: current
      downloadType: single
      artifactName: drop
      downloadPath: $(Build.ArtifactStagingDirectory)
  - task: GithubRelease@0
    inputs:
      gitHubConnection: 'GitHub: ap0llo'
      repositoryName: 'ap0llo/markdown-generator'
      action: 'create'
      target: '$(Build.SourceVersion)'
      tagSource: manual
      tag: v$(Build.BuildNumber)
      releaseNotesSource: inputs
      releaseNotes: 'Automatic release by Azure DevOps. Package available on [NuGet.org](https://www.nuget.org/packages/Grynwald.MarkdownGenerator/$(Build.BuildNumber))'
      assets: $(Build.ArtifactStagingDirectory)/*.nupkg
      addChangeLog: true

      